// 새로 변경
buildscript {
	ext {
		springBootVersion = '2.7.7'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.7.7")
		classpath("io.spring.gradle:dependency-management-plugin:1.1.0")
	}
}

// 모든 프로젝트
allprojects {
	group = 'jjuni.pjt'
	version = '1.0'

	repositories {
		mavenCentral()
	}

}


// 하위 프로젝트(root 프로젝트는 해당되지 않음)
subprojects {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'java'

	sourceCompatibility = '1.8' // 이거때문에 war를 배포해도 안올라갔었음;; java 버전이랑 맞춰야하는데 11이 아니었나봄
	targetCompatibility  = '1.8' // 이거때문에 war를 배포해도 안올라갔었음;; java 버전이랑 맞춰야하는데 11이 아니었나봄

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
		all {
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
		implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-log4j2'
		implementation 'org.springframework.boot:spring-boot-devtools'

		compileOnly 'org.projectlombok:lombok'
		runtimeOnly 'org.postgresql:postgresql'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		// spring data jpa 를 사용
		implementation('org.springframework.boot:spring-boot-starter-data-jpa')
		implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.4'

		// kafka
		implementation 'org.springframework.kafka:spring-kafka'
	}

	// 해당 task로 서브 모듈 추가시 기초적인 디렉토리를 자동으로 생성해줍니다.
	task initSourceFolders {
		sourceSets*.java.srcDirs*.each {
			if (!it.exists()) {
				it.mkdirs()
			}
		}

		sourceSets*.resources.srcDirs*.each {
			if (!it.exists()) {
				it.mkdirs()
			}
		}
	}
}

project(':main-module') {
	apply plugin: 'war'

	war {
		archiveName('ROOT.war')
	}

	dependencies {
		// 다른 DB를 사용하는 경우
//		runtimeOnly 'com.h2database:h2' // H2
//		runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc' // MSSQL
//		runtimeOnly 'mysql:mysql-connector-java' // MYSQL
//		runtimeOnly 'org.postgresql:postgresql' // PostgreSQL

		implementation(project(":common-module"))
		implementation(project(":test-module"))
		implementation(project(":kafka-module"))
	}
}

project(':common-module') {
	// bootWar { enabled=false}
	jar { enabled=true }

	dependencies {}
}

project(':kafka-module') {
	// bootWar { enabled=false}
	jar { enabled=true }

	dependencies {}
}

project(':test-module') {
	// bootWar { enabled=false}
	jar { enabled=true }

	dependencies {
		// xml 파싱을 위한 라이브러리
//		implementation group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'

		// xml을 json으로 바꿔주는 라이브러리
//		compileOnly group: 'org.json', name: 'json', version: '20180813'

		// 파일 이름 체크를 위한 라이브러리
//		implementation 'commons-io:commons-io:2.5'

		compileOnly(project(":common-module"))
	}
}