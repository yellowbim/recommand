// 새로 변경
buildscript {
	ext {
		springBootVersion = '2.7.7'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.7.7")
		classpath("io.spring.gradle:dependency-management-plugin:1.1.0")
	}
}

// 모든 프로젝트
allprojects {
	group = 'jjuni.pjt'
	version = '1.0'

	repositories {
		mavenCentral()
	}

}


// 하위 프로젝트
subprojects {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'java'
	apply plugin: 'war'

	sourceCompatibility = '11'
	targetCompatibility  = '11'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
		all {
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
		implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-log4j2'
		implementation 'org.springframework.boot:spring-boot-devtools'

		compileOnly 'org.projectlombok:lombok'
		runtimeOnly 'org.postgresql:postgresql'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		// spring data jpa 를 사용
		compileOnly('org.springframework.boot:spring-boot-starter-data-jpa')
		implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.4'

		// kafka
		implementation 'org.springframework.kafka:spring-kafka'
	}

	bootWar { enabled = false }
	jar { enabled = true }

	// 해당 task로 서브 모듈 추가시 기초적인 디렉토리를 자동으로 생성해줍니다.
	task initSourceFolders {
		sourceSets*.java.srcDirs*.each {
			if (!it.exists()) {
				it.mkdirs()
			}
		}

		sourceSets*.resources.srcDirs*.each {
			if (!it.exists()) {
				it.mkdirs()
			}
		}
	}
}

project(':main-module') {
	def propertyFile = 'application.yml'
	def logbackFile = 'logback.xml'

	war {
		archiveBaseName = 'ROOT'
		webInf {
			from(sourceSets.main.resources) { // 특정 파일들을 가지고 올라감 (여기서는 ${profile}  옵션이 안먹는듯?)
//				include logbackFile, propertyFile
//				into 'classes'

				// profile의 이름을 기본으로 변경
//				if (isProfile) {
//					rename(propertyFile, 'application.properties')
//					rename(logbackFile, 'logback.xml')
//				}
			}
		}
	}

	dependencies {
		// 다른 DB를 사용하는 경우
//		runtimeOnly 'com.h2database:h2' // H2
//		runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc' // MSSQL
//		runtimeOnly 'mysql:mysql-connector-java' // MYSQL
//		runtimeOnly 'org.postgresql:postgresql' // PostgreSQL

		compileOnly(project(":common-module"))
		compileOnly(project(":test-module"))
		compileOnly(project(":kafka-module"))
	}
}

project(':common-module') {
	dependencies {
//		implementation 'org.springframework.kafka:spring-kafka'
	}
}

project(':kafka-module') {
	dependencies {
//		implementation 'org.springframework.kafka:spring-kafka'
	}
}